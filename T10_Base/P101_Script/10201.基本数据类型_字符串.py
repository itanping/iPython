"""
1. 字符串不能改变。向一个索引位置赋值，比如 word[0] = 'm' 会导致错误。
2. 中单引号 ' 和双引号 " 使用完全相同。
3. 使用三个引号(''' 或 \""")可以指定一个多行字符串。
4. 字符串可以用 + 运算符连接在一起，用 * 运算符重复。
5. 两种索引方式，从左往右以 0 开始，从右往左以 -1 开始。
6. 没有单独的字符类型，一个字符就是长度为 1 的字符串。
7. 字符串的截取的语法格式如下：变量[头下标:尾下标:步长]。[:]遵循左闭右开原则。
8. 转义符 \\。
9. 字符串可以用 + 运算符连接在一起，用 * 运算符重复。
"""

# 换行输出
print('---------------------------------------------------------------------------------------------------------------')
'''Python 访问字符串中的值'''

content = "Hello, Python!"
print(content)                    # 输出字符串
print(content[0:-1])              # 输出第一个到倒数第二个的所有字符
print(content[0])                 # 输出字符串第一个字符
print(content[2:5])               # 输出从第三个开始到第五个的字符
print(content[2:])                # 输出从第三个开始后的所有字符
print(content[1:12:2])            # 输出从第二个开始到第五个且每隔一个的字符（步长为2）
print(content * 2)                # 输出字符串两次
print(content + '你好, Python!')  # 连接字符串
print(content[1], content[-2])
'''
Hello, Python!
Hello, Python
H
llo
llo, Python!
el,Pto
Hello, Python!Hello, Python!
Hello, Python!你好, Python!
e n
'''


print('---------------------------------------------------------------------------------------------------------------')
'''Python 点位输出'''
print("我在学习 %s !" % 'Python')
print("我在学习 %s !，大家都来一起学习 %s !" % ('Python', 'Python'))

"""
我在学习 Python !
我在学习 Python !，大家都来一起学习 Python !
"""


print('---------------------------------------------------------------------------------------------------------------')
'''Python 字符串运算符'''

a = "Hello"
b = "Python"

print("a + b 输出结果：", a + b)
print("a * 2 输出结果：", a * 2)
print("a[1] 输出结果：", a[1])
print("a[1:4] 输出结果：", a[1:4])

if ("H" in a):
    print("H 在变量 a 中")
else:
    print("H 不在变量 a 中")
if ("M" not in a):
    print("M 不在变量 a 中")
else:
    print("M 在变量 a 中")

"""
a + b 输出结果： HelloPython
a * 2 输出结果： HelloHello
a[1] 输出结果： e
a[1:4] 输出结果： ell
H 在变量 a 中
M 不在变量 a 中
"""


print('---------------------------------------------------------------------------------------------------------------')
'''Python 转义字符'''
print('hello\nPython')   # 使用反斜杠(\)+n转义特殊字符
print(r'hello\nPython')  # 在字符串前面添加一个 r，表示原始字符串，不会发生转义
print("\a")

"""
hello
Python
hello\nPython
"""


print('---------------------------------------------------------------------------------------------------------------')
arr = ['1', '2', '3',
       '4', '5', '6']
print(arr)
print(len(content))
"""
['1', '2', '3', '4', '5', '6']
14
"""

print('---------------------------------------------------------------------------------------------------------------')
# 括号及其里面的字符 (称作格式化字段) 将会被 format() 中的参数替换。
# 在括号中的数字用于指向传入对象在 format() 中的位置。
print('{}，{}!'.format('Hello', 'Python'))
print('{0}，{1}!'.format('Hello', 'Word'))
print('{1}，{0}!'.format('Python', 'Hello'))
print('%s，%s!' % ('Hello', 'Python'))          # 旧式字符串格式化
print('%d，%d' % (111, 222))                    # 旧式字符串格式化

"""
Hello，Python!
Hello，Word!
Hello，Python!
Hello，Python!
111，222
"""